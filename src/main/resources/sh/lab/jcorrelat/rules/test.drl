/*
 * Copyright 2011 Dustin Frisch<fooker@lab.sh>
 * 
 * This file is part of senchineru.
 * 
 * senchineru is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * senchineru is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with senchineru.  If not, see <http://www.gnu.org/licenses/>.
 */
package sh.lab.jcorrelat.rules;

import sh.lab.jcorrelat.Message;
import static sh.lab.jcorrelat.MessageFactory.messageFactory



declare Message
    @role(event)
    @timestamp(time)
end



rule "SSH bruteforce detection"
when
    success : Message(message matches "^Accepted password for [^\\s]* from [^\\s]* port [^\\s]* ssh2$")
    failed_count : Number( doubleValue >= 10 ) from accumulate(
        Message(this before[0,20m] success,
                message matches "^Failed password for [^\\s]* from [^\\s]* port [^\\s]* ssh2$"),
        count())

then
    System.out.println("success = " + success);
    System.out.println("failed_count = " + failed_count);
    
    success.setSeverity(Message.Severity.EMERGENCY);
    success.setMessage(success.getMessage() + " [bruteforce]");
    update(success);

    insert(messageFactory()
        .setTime(success.getTime())
        .setHost(success.getHost())
        .setSeverity(Message.Severity.EMERGENCY)
        .setFacility(Message.Facility.SECURITY)
        .setProgram(success.getProgram())
        .setMessage("Successfull bruteforce attack")
        .message());
end
